<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : aruba-iot-nb-tp.proto
 */


namespace IMTelemetry;

/**
 * Protobuf message : IMTelemetry.TransportProfileData
 */
class TransportProfileData extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * name required string = 1
     *
     * @var string
     */
    protected $name = null;

    /**
     * devClass repeated message = 2
     *
     * @var \Protobuf\Collection<\IMTelemetry\deviceClassDetail>
     */
    protected $devClass = null;

    /**
     * txBytes required uint64 = 3
     *
     * @var int
     */
    protected $txBytes = null;

    /**
     * rxBytes required uint64 = 4
     *
     * @var int
     */
    protected $rxBytes = null;

    /**
     * updateDeviceCount required uint32 = 5
     *
     * @var int
     */
    protected $updateDeviceCount = null;

    /**
     * serverType required uint32 = 6
     *
     * @var int
     */
    protected $serverType = null;

    /**
     * Check if 'name' has a value
     *
     * @return bool
     */
    public function hasName()
    {
        return $this->name !== null;
    }

    /**
     * Get 'name' value
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Set 'name' value
     *
     * @param string $value
     */
    public function setName($value)
    {
        $this->name = $value;
    }

    /**
     * Check if 'devClass' has a value
     *
     * @return bool
     */
    public function hasDevClassList()
    {
        return $this->devClass !== null;
    }

    /**
     * Get 'devClass' value
     *
     * @return \Protobuf\Collection<\IMTelemetry\deviceClassDetail>
     */
    public function getDevClassList()
    {
        return $this->devClass;
    }

    /**
     * Set 'devClass' value
     *
     * @param \Protobuf\Collection<\IMTelemetry\deviceClassDetail> $value
     */
    public function setDevClassList(\Protobuf\Collection $value = null)
    {
        $this->devClass = $value;
    }

    /**
     * Add a new element to 'devClass'
     *
     * @param \IMTelemetry\deviceClassDetail $value
     */
    public function addDevClass(\IMTelemetry\deviceClassDetail $value)
    {
        if ($this->devClass === null) {
            $this->devClass = new \Protobuf\MessageCollection();
        }

        $this->devClass->add($value);
    }

    /**
     * Check if 'txBytes' has a value
     *
     * @return bool
     */
    public function hasTxBytes()
    {
        return $this->txBytes !== null;
    }

    /**
     * Get 'txBytes' value
     *
     * @return int
     */
    public function getTxBytes()
    {
        return $this->txBytes;
    }

    /**
     * Set 'txBytes' value
     *
     * @param int $value
     */
    public function setTxBytes($value)
    {
        $this->txBytes = $value;
    }

    /**
     * Check if 'rxBytes' has a value
     *
     * @return bool
     */
    public function hasRxBytes()
    {
        return $this->rxBytes !== null;
    }

    /**
     * Get 'rxBytes' value
     *
     * @return int
     */
    public function getRxBytes()
    {
        return $this->rxBytes;
    }

    /**
     * Set 'rxBytes' value
     *
     * @param int $value
     */
    public function setRxBytes($value)
    {
        $this->rxBytes = $value;
    }

    /**
     * Check if 'updateDeviceCount' has a value
     *
     * @return bool
     */
    public function hasUpdateDeviceCount()
    {
        return $this->updateDeviceCount !== null;
    }

    /**
     * Get 'updateDeviceCount' value
     *
     * @return int
     */
    public function getUpdateDeviceCount()
    {
        return $this->updateDeviceCount;
    }

    /**
     * Set 'updateDeviceCount' value
     *
     * @param int $value
     */
    public function setUpdateDeviceCount($value)
    {
        $this->updateDeviceCount = $value;
    }

    /**
     * Check if 'serverType' has a value
     *
     * @return bool
     */
    public function hasServerType()
    {
        return $this->serverType !== null;
    }

    /**
     * Get 'serverType' value
     *
     * @return int
     */
    public function getServerType()
    {
        return $this->serverType;
    }

    /**
     * Set 'serverType' value
     *
     * @param int $value
     */
    public function setServerType($value)
    {
        $this->serverType = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        if ( ! isset($values['name'])) {
            throw new \InvalidArgumentException('Field "name" (tag 1) is required but has no value.');
        }

        if ( ! isset($values['txBytes'])) {
            throw new \InvalidArgumentException('Field "txBytes" (tag 3) is required but has no value.');
        }

        if ( ! isset($values['rxBytes'])) {
            throw new \InvalidArgumentException('Field "rxBytes" (tag 4) is required but has no value.');
        }

        if ( ! isset($values['updateDeviceCount'])) {
            throw new \InvalidArgumentException('Field "updateDeviceCount" (tag 5) is required but has no value.');
        }

        if ( ! isset($values['serverType'])) {
            throw new \InvalidArgumentException('Field "serverType" (tag 6) is required but has no value.');
        }

        $message = new self();
        $values  = array_merge([
            'devClass' => [],
        ], $values);

        $message->setName($values['name']);
        $message->setTxBytes($values['txBytes']);
        $message->setRxBytes($values['rxBytes']);
        $message->setUpdateDeviceCount($values['updateDeviceCount']);
        $message->setServerType($values['serverType']);

        foreach ($values['devClass'] as $item) {
            $message->addDevClass($item);
        }

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'TransportProfileData',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'name',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'devClass',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_MESSAGE(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REPEATED(),
                    'type_name' => '.IMTelemetry.deviceClassDetail'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'txBytes',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'rxBytes',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'updateDeviceCount',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'serverType',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_REQUIRED()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->name === null) {
            throw new \UnexpectedValueException('Field "\\IMTelemetry\\TransportProfileData#name" (tag 1) is required but has no value.');
        }

        if ($this->txBytes === null) {
            throw new \UnexpectedValueException('Field "\\IMTelemetry\\TransportProfileData#txBytes" (tag 3) is required but has no value.');
        }

        if ($this->rxBytes === null) {
            throw new \UnexpectedValueException('Field "\\IMTelemetry\\TransportProfileData#rxBytes" (tag 4) is required but has no value.');
        }

        if ($this->updateDeviceCount === null) {
            throw new \UnexpectedValueException('Field "\\IMTelemetry\\TransportProfileData#updateDeviceCount" (tag 5) is required but has no value.');
        }

        if ($this->serverType === null) {
            throw new \UnexpectedValueException('Field "\\IMTelemetry\\TransportProfileData#serverType" (tag 6) is required but has no value.');
        }

        if ($this->name !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeString($stream, $this->name);
        }

        if ($this->devClass !== null) {
            foreach ($this->devClass as $val) {
                $writer->writeVarint($stream, 18);
                $writer->writeVarint($stream, $val->serializedSize($sizeContext));
                $val->writeTo($context);
            }
        }

        if ($this->txBytes !== null) {
            $writer->writeVarint($stream, 24);
            $writer->writeVarint($stream, $this->txBytes);
        }

        if ($this->rxBytes !== null) {
            $writer->writeVarint($stream, 32);
            $writer->writeVarint($stream, $this->rxBytes);
        }

        if ($this->updateDeviceCount !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->updateDeviceCount);
        }

        if ($this->serverType !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeVarint($stream, $this->serverType);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->name = $reader->readString($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 11);

                $innerSize    = $reader->readVarint($stream);
                $innerMessage = new \IMTelemetry\deviceClassDetail();

                if ($this->devClass === null) {
                    $this->devClass = new \Protobuf\MessageCollection();
                }

                $this->devClass->add($innerMessage);

                $context->setLength($innerSize);
                $innerMessage->readFrom($context);
                $context->setLength($length);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->txBytes = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->rxBytes = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->updateDeviceCount = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->serverType = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->name !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->name);
        }

        if ($this->devClass !== null) {
            foreach ($this->devClass as $val) {
                $innerSize = $val->serializedSize($context);

                $size += 1;
                $size += $innerSize;
                $size += $calculator->computeVarintSize($innerSize);
            }
        }

        if ($this->txBytes !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->txBytes);
        }

        if ($this->rxBytes !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->rxBytes);
        }

        if ($this->updateDeviceCount !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->updateDeviceCount);
        }

        if ($this->serverType !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->serverType);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->name = null;
        $this->devClass = null;
        $this->txBytes = null;
        $this->rxBytes = null;
        $this->updateDeviceCount = null;
        $this->serverType = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \IMTelemetry\TransportProfileData) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->name = ($message->name !== null) ? $message->name : $this->name;
        $this->devClass = ($message->devClass !== null) ? $message->devClass : $this->devClass;
        $this->txBytes = ($message->txBytes !== null) ? $message->txBytes : $this->txBytes;
        $this->rxBytes = ($message->rxBytes !== null) ? $message->rxBytes : $this->rxBytes;
        $this->updateDeviceCount = ($message->updateDeviceCount !== null) ? $message->updateDeviceCount : $this->updateDeviceCount;
        $this->serverType = ($message->serverType !== null) ? $message->serverType : $this->serverType;
    }


}

